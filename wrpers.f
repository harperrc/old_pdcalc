      subroutine wrpers(yld,hob1,iv,jjt,kf,dsig,wr,ierr)
c
c  compute weapon radius for personnel
c
c  inputs
c    yld      weapon yield (kt)
c    hob1     height of burst (feet)
c    iv       vulnerability number (not used)
c    jjt      target type (not used)
c    kf       k-factor (1-16 [corresponds to a-p])
c                                       fatalities casualties any injury
c                                       ---------- ---------- ----------
c      wood framed buildings                1(a)      2(b)
c      single story buildings
c      wall bearing buildings
c      adobe buildings
c      forests
c
c      multistory residential               3(c)      4(d)
c      commercial or industrial buildings
c      steel or reinforced concrete framed
c
c      basements                            5(e)      6(f)
c
c      deliberate underground shelters      7(g)      8(h)
c
c      expedient underground shelters       9(i)     10(j)
c
c      open urban or open rural             11(k)    12(l)
c
c      exposed thermal                      13(m)    14(n)
c
c      underground command post             15(o)    15(o)
c
c      urban                                                    16(p)
c 
c
c    dsig     damage sigma
c    wr       weapon radius (feet)
c  
      include "real8.h"
      include "const.h"
      include "files.h"

      dimension s(6),t(6),nm(16),li(39),lk(40),a(32),b(32),ch(562),
     *  ch1(64),ch65(60),ch125(53),ch178(69),ch247(70),ch317(72),
     *  ch389(48),ch437(42),ch479(42),ch521(42)
c
      equivalence (ch1(1),ch(1)),(ch65(1),ch(65)),(ch125(1),ch(125)),
     *  (ch178(1),ch(178)),(ch247(1),ch(247)),(ch317(1),ch(317)),
     *  (ch389(1),ch(389)),(ch437(1),ch(437)),(ch479(1),ch(479)),
     *  (ch521(1),ch(521))
c
      data s(1),t(1)/1.0,1.0/
      data nm/1,4,6,9,11,14,16,19,22,25,26,30,32,35,38,39/
      data li/3,4,4,4,4,3,4,4,4,4,5,3,4,4,4,5,4,3,5,4,
     *        3,6,5,3,5,5,4,3,3,3,5,6,4,4,6,4,4,6,6/
      data lk/0,12,24,36,52,64,76,88,100,112,124,144,153,165,177,
     *  189,214,234,246,271,283,292,316,336,348,373,388,400,406,
     *  412,421,436,454,466,478,496,508,520,544,562/
c
      data ch1/538.1,-39.5,-52.1,-30.9,422.2,-62.4,-62.8,-52.4,
     *  44.1,-14.8,-17.6,-18.9,
     *  1706.3,197.2,-107.1,3334.9,1036.8,142.0,1031.1,76.8,-121.8,
     *  621.6,181.0,28.2,
     *  5055.6,-4552.1,1862.5,-11696.7,22289.7,-8102.4,5038.9,-5562.1,
     *  2274.4,-4369.0,7269.2,-2684.7,
     *  3591.6,1515.9,399.9,361.3,5127.9,2364.2,666.0,586.1,2195.9,
     *  1099.2,351.0,310.6,464.2,240.9,92.1,83.0,
     *  3116.5,710.2,-49.3,6719.7,1755.5,-137.0,1756.3,399.1,-26.4,
     *  1169.2,300.3,-26.0/
c
      data ch65/511.1,-44.2,-26.3,3.3,343.5,-72.1,-23.4,-2.7,15.9,
     *  -18.1,-4.5,-2.9,
     *  1475.7,427.2,35.2,2369.8,478.3,52.6,903.1,375.9,34.1,448.2,
     *  -9.2,-29.5,
     *  310.6,2224.8,-581.9,2943.8,-1062.7,-21.9,-8.5,1901.6,-363.2,
     *  1264.4,-1308.1,397.0,
     *  3195.1,1464.3,279.8,4503.0,2298.3,470.8,1964.7,1091.7,264.4,
     *  435.5,246.5,63.6,
     *  2821.6,604.3,-59.2,5935.3,1618.3,-94.5,1602.9,328.2,-40.1,
     *  1034.0,278.1,-12.7/
c
      data ch125/1496.5,372.6,78.3,3.3,1956.8,577.2,119.2,-16.9,943.8,
     *  332.0,60.6,-12.6,356.8,100.3,9.6,-0.1,64.6,-7.0,-10.9,-0.8,
     *  881.3,-535.8,38.3,874.4,-804.2,65.8,190.8,-278.2,27.7,1418.4,
     *  835.9,660.6,-1473.6,3950.5,-3648.9,757.4,1053.0,696.5,204.4,
     *  143.8,-410.1,1816.8,303.2,-209.0,2265.0,448.0,-314.6,847.8,
     *  187.3,-154.1,171.7,30.8,-39.2/
c
      data ch178/2213.5,430.9,-71.5,4457.7,1154.4,-15.5,1173.5,253.9,
     *  -54.2,801.4,184.7,-3.7,-247.8,-1234.0,-621.2,-148.2,20.3,
     *  -767.2,-2067.6,-1033.6,-256.2,45.1,-635.7,-1202.3,-612.5,-150.9,
     *  38.7,-262.0,-471.1,-247.6,-53.9,22.1,-53.3,-102.6,-55.0,-9.2,
     *  7.2,-3617.0,-7824.1,-6433.1,-3799.1,-1141.6,4213.8,8832.9,
     *  11023.7,8211.2,2830.5,-3966.9,-7719.2,-6392.5,-3806.3,-1134.1,
     *  1178.4,2731.0,3395.8,2551.9,901.9,-27720.8,-49305.0,-27982.8,
     *  -8218.3,37489.9,65058.5,37703.2,11270.9,-10966.7,-19824.7,
     *  -11131.7,-3256.3/
c
      data ch247/325.1,-986.7,-741.7,-416.4,-133.5,220.1,-1491.4,
     *  -1118.4,-648.9,-199.0,45.5,-667.7,-525.6,-318.0,-94.5,
     *  63.3,-179.0,-158.5,-98.5,-32.0,27.7,-29.7,-30.3,-18.5,-7.3,
     *  931.3,-1252.0,-164.1,1034.8,-1886.8,-295.4,257.1,-793.2,
     *  -208.7,20.8,-148.6,-77.5,2312.0,-1951.4,-451.1,1267.0,
     *  -2232.0,1482.1,1773.7,-1609.5,-173.8,
     *  448.3,-307.1,-101.0,-17.3,405.8,-524.7,-179.0,-57.8,139.1,
     *  -192.5,-69.9,-38.8,193.9,143.2,75.4,13.5,130.6,149.2,72.1,18.5,
     *  4.0,-5.9,-10.4,-3.7/
c
      data ch317/-1092.0,659.2,-1525.0,630.3,-2302.9,1343.1,-2677.2,
     *  1136.4,-1705.2,1128.3,-1753.1,784.3,-799.2,669.9,-816.3,392.0,
     *  -212.7,225.3,-222.2,114.6,5145.1,-7147.4,3164.7,-144.9,-6229.4,
     *  9549.0,-4581.7,897.3,2352.1,-2946.0,1198.2,192.0,1552.9,252.5,
     *  -60.7,-68.7,-26.5,2096.1,382.0,-78.9,-108.1,-34.9,915.6,181.8,  
     *  -36.2,-48.5,-13.6,297.0,46.3,-14.0,-11.8,-4.9,58.0,3.1,-3.5,
     *  -2.1,-1.5,2495.8,530.8,-39.0,3584.0,836.7,-50.3,1716.9,392.1,
     *  -40.2,521.7,91.8,-18.6,72.1,11.0,0.6/
c
      data ch389/883.9,2319.7,-538.2,989.4,3616.8,-790.9,447.4,1590.4,
     *  -267.7,152.6,297.2,-14.8,-30638.8,43111.4,43828.5,-52525.1,
     *  -24879.6,34686.8,8664.5,1263.4,-5289.4,-1069.9,5902.9,777.7,
     *  869.2,161.4,-26.6,804.6,224.6,-23.8,153.1,73.8,-4.8,4188.7,
     *  1085.1,-67.6,5210.5,1195.5,-112.9,3268.1,949.0,-43.5,616.9,
     *  72.4,-21.8,277.0,116.9,6.2/
c
      data ch437/2763.7,475.7,-92.8,4165.0,879.8,-158.0,1998.9,624.0,
     *  -105.5,678.7,313.1,-53.3,180.8,100.1,-14.4,39.1,16.6,2.3,54.4,
     *  -3019.6,-1270.6,-71.6,-4518.7,-1848.7,-159.0,-1967.7,-751.6,
     *  -59.9,-416.8,-144.4,358367.6,520343.9,165511.7,-559255.1,
     *  -822777.0,-263079.9,291463.4,424061.4,135192.3,-65192.0,
     *  -96277.0,-31131.7/
c
      data ch479/3659.6,809.4,-118.7,5515.8,1458.8,-210.0,2638.5,
     *  1003.0,-140.6,891.8,489.0,-68.2,241.5,148.3,-13.4,55.1,21.0,
     *  8.1,-55.5,-4178.2,-1704.7,-312.6,-6309.3,-2497.8,-351.8,
     *  -2809.3,-1034.0,-131.2,-620.8,-206.6,505974.8,734336.1,
     *  232815.5,-792454.4,-1163833.9,-370734.3,413597.8,601382.9,
     *  191085.0,-94345.2,-138879.9,-44740.8/
c
      data ch521/195.8,-56.9,-34.1,-6.7,249.7,-154.1,-105.2,-33.7,
     *  144.2,-2.3,0.3,2.5,22.0,-45.5,-32.6,-12.0,16.8,12.1,9.4,4.2,
     *  -0.1,-5.3,-3.9,-1.1,4604.8,1135.1,-84.1,6750.2,1763.8,-118.9,
     *  3250.3,840.2,-60.1,984.3,241.6,-15.9,196.7,64.9,-0.2,57.1,
     *  23.5,-1.5/
c
      data a/1.6,2.3,0.75,1.6,0.25,0.9,1.6,1.5,1.7,-0.5,0.55,3.7,2.79,
     *  1.35,2.15,-1.3,2.0,2.79,0.225,3.99,1.0,1.5,2.2,-0.4,0.7,1.55,
     *  0.8,1.2,1.8,-2.0,0.9,1.6/
      data b/-0.00071,-0.000999,0.0005,0.0,-0.000249,-0.00055,-0.000749,
     *  -0.00067,-0.00053,0.0024,-0.0005,-0.00233,0.00071,0.00175,
     *  -0.00225,0.0035,0.00175,-0.0022,0.0035,-0.00229,-0.00067,
     *  -0.00067,-0.00087,0.0012,0.0004,0.0,-0.00055,-0.00045,-0.00055,
     *  0.0,-0.0006,-0.00065/
c
      ierr=0

c  added to quiet gfortran 

      if (iv.lt.0)write(6,*)'********** iv < 0 ',iv
      if (jjt.lt.0)write(6,*)'********** jjt < 0 ',jjt

      if(kf.gt.16) then
         ierr=8
         return
      endif
c
      yldcu=yld**third
      shob=hob1/yldcu
c
      wr=zero
      dsig=0.30d0
c
      xl=log10(yld)
c
      x=(xl+one)/2.65052d0-one
      y=shob/500.0d0-one
c
      if(kf.eq.15)y=shob/200.0-one
c
      if(abs(x).le.one.and.abs(y).le.one)goto 46
      ierr=12
      return
c
 46   s(2)=x
      t(2)=y
c
      do l=3,6
         s(l)=2.0*x*s(l-1)-s(l-2)
         t(l)=2.0*y*t(l-1)-t(l-2)
      enddo
c
      n=nm(kf)
      goto (101,102,103,104,105,106,107,108,109,110,111,112,113,
     *  113,115,116),kf
c
 101  ks=2
      if(shob.gt.700.0d0)ks=4
      if(yld.lt.10.0d0)goto 142
      n=n+1
      if(shob.ge.800.0d0)n=n+1
      goto 142
c
 102  ks=6
      if(yld.gt.10.0d0)n=n+1
      goto 141
c
 103  if(yld.le.10.0d0)goto 200
      n=n+1
      if(shob.gt.700.0)n=n+1
      goto 200
c
 104  ks=8
      if(yld.gt.10.0d0)n=n+1
      goto 143
c
 105  ks=9
      if(shob.gt.750.0d0)ks=10
      if(shob.le.700.0d0)goto 144
      n=n+1
      if(yld.gt.40.0d0)n=n+1
      goto 144
c
 106  ks=11
      if(yld.gt.10.0d0)n=n+1
      goto 144
c
 107  ks=12
      if(shob.gt.300.0d0)ks=13
      if(yld.gt.100.0d0)n=n+1
      if(yld.ge.2000.0d0)n=n+1
      goto 144
c
 108  ks=14
      if(shob.gt.200.0d0)ks=15
      if(shob.gt.600.0d0)ks=16
      if(shob.lt.700.0d0)goto 144
      n=n+1
      if(yld.gt.200.0)n=n+1
      goto 144
c
 109  ks=17
      if(shob.gt.200.0d0)ks=18
      if(shob.gt.450.0d0)ks=19
      if(shob.gt.650.0d0)ks=20
      if(shob.lt.500.0d0)goto 144
      n=n+1
      chk=0.53d0-0.50d0*y
      if(yld.le.700.0d0.and.x.lt.chk)goto 144
      if(shob.gt.800.0d0)return
      n=n+1
      goto 144
c
 110  dsig=0.40d0
      goto 200
c
 111  ks=22
      if(shob.gt.750.0d0)ks=25
      if(yld.gt.200.0d0)goto 121
      if(shob.ge.800.0d0)n=n+1
      goto 141
c
 121  if(shob.lt.900.0d0)goto 141
      n=n+2
      if(yld.ge.1000.0d0)n=n+1
      goto 141
c
 112  ks=28
      if(yld.gt.4.0d0)n=n+1
      goto 141
c
 113  if(yld.ge.400.0)goto 123
      if(shob.lt.300.0)n=n+1
      goto 200
c
 123  if(shob.le.200.0)n=n+2
      goto 200
c
 115  if(shob.gt.400.0)return
      chk=0.75*y-one
      if(x.lt.chk)return
      goto 200
c
 116  ks=31
c
c  find ksig partitions
c
 141  x45=a(ks+1)+b(ks+1)*shob
      if(xl.le.x45)goto 142
      dsig=0.50
      goto 200
c
 142  x25=a(ks-1)+b(ks-1)*shob
      if(xl.le.x25)dsig=0.20
c
 143  x35=a(ks)+b(ks)*shob
      if(xl.gt.x35)dsig=0.40
      goto 200
c
 144  dsig=0.40
      x45=a(ks)+b(ks)*shob
      if(xl.lt.x45)dsig=0.50
c
 200  k=lk(n)
      il=li(n)
      jl=(lk(n+1)-k)/il
c
      do i=1,il
         c=zero
         do j=1,jl
            k=k+1
            c=c+ch(k)*t(j)
         enddo
         wr=wr+c*s(i)
      enddo
c
      if(wr.lt.zero)wr=zero
      wr=wr*10.0
c
      return
      end
