      subroutine wrpers(yld,hob1,kf,dsig,wr,ierr)

c  compute weapon radius for personnel

c  N.B harper removed (iv,jjt from argument list as they were unused)

c
c  inputs
c    yld      weapon yield (kt)
c    hob1     height of burst (feet)
c    kf       k-factor (1-16 [corresponds to a-p])
c                                       fatalities casualties any injury
c                                       ---------- ---------- ----------
c      wood framed buildings                1(a)      2(b)
c      single story buildings
c      wall bearing buildings
c      adobe buildings
c      forests
c
c      multistory residential               3(c)      4(d)
c      commercial or industrial buildings
c      steel or reinforced concrete framed
c
c      basements                            5(e)      6(f)
c
c      deliberate underground shelters      7(g)      8(h)
c
c      expedient underground shelters       9(i)     10(j)
c
c      open urban or open rural             11(k)    12(l)
c
c      exposed thermal                      13(m)    14(n)
c
c      underground command post             15(o)    15(o)
c
c      urban                                                    16(p)
c 
c
c    dsig     damage sigma
c    wr       weapon radius (feet)
c  
      include "real8.h"
      include "const.h"
      include "files.h"

c  replaced equivalence statements and array ch1...... since modern
c  fortran is not limited to 19 continuations

      dimension s(6),t(6),nm(16),li(39),lk(40),a(32),b(32),ch(562)
c
      data s(1),t(1) /1.0d0,1.0d0/

      data nm / 1, 4 , 6 ,9 ,11 ,14 ,16 ,19 ,22 ,25 ,26 ,30 ,32,
     *        35 ,38 ,39/

      data li /3 ,4 ,4 ,4 ,4 ,3 ,4 ,4 ,4 ,4 ,5 ,3 ,4 ,4 ,4 ,5,
     *         4 ,3 ,5 ,4 ,3 ,6 ,5 ,3 ,5 ,5 ,4 ,3 ,3 ,3 ,5 ,6,
     *         4 ,4 ,6 ,4 ,4 ,6 ,6/

      data lk /  0 , 12 , 24 , 36 , 52 , 64 , 76 , 88 ,100 ,112,
     *         124 ,144 ,153 ,165 ,177 ,189 ,214 ,234 ,246 ,271,
     *         283 ,292 ,316 ,336 ,348 ,373 ,388 ,400 ,406 ,412,
     *         421 ,436 ,454 ,466 ,478 ,496 ,508 ,520 ,544 ,562/

      data ch /
     *      538.1d0,      -39.5d0,      -52.1d0,      -30.9d0, 
     *      422.2d0,      -62.4d0,      -62.8d0,      -52.4d0, 
     *       44.1d0,      -14.8d0,      -17.6d0,      -18.9d0, 
     *     1706.3d0,      197.2d0,     -107.1d0,     3334.9d0, 
     *     1036.8d0,      142.0d0,     1031.1d0,       76.8d0, 
     *     -121.8d0,      621.6d0,      181.0d0,       28.2d0, 
     *     5055.6d0,    -4552.1d0,     1862.5d0,   -11696.7d0, 
     *    22289.7d0,    -8102.4d0,     5038.9d0,    -5562.1d0, 
     *     2274.4d0,    -4369.0d0,     7269.2d0,    -2684.7d0, 
     *     3591.6d0,     1515.9d0,      399.9d0,      361.3d0, 
     *     5127.9d0,     2364.2d0,      666.0d0,      586.1d0, 
     *     2195.9d0,     1099.2d0,      351.0d0,      310.6d0, 
     *      464.2d0,      240.9d0,       92.1d0,       83.0d0, 
     *     3116.5d0,      710.2d0,      -49.3d0,     6719.7d0, 
     *     1755.5d0,     -137.0d0,     1756.3d0,      399.1d0, 
     *      -26.4d0,     1169.2d0,      300.3d0,      -26.0d0, 
     *      511.1d0,      -44.2d0,      -26.3d0,        3.3d0, 
     *      343.5d0,      -72.1d0,      -23.4d0,       -2.7d0, 
     *       15.9d0,      -18.1d0,       -4.5d0,       -2.9d0, 
     *     1475.7d0,      427.2d0,       35.2d0,     2369.8d0, 
     *      478.3d0,       52.6d0,      903.1d0,      375.9d0, 
     *       34.1d0,      448.2d0,       -9.2d0,      -29.5d0, 
     *      310.6d0,     2224.8d0,     -581.9d0,     2943.8d0, 
     *    -1062.7d0,      -21.9d0,       -8.5d0,     1901.6d0, 
     *     -363.2d0,     1264.4d0,    -1308.1d0,      397.0d0, 
     *     3195.1d0,     1464.3d0,      279.8d0,     4503.0d0, 
     *     2298.3d0,      470.8d0,     1964.7d0,     1091.7d0, 
     *      264.4d0,      435.5d0,      246.5d0,       63.6d0, 
     *     2821.6d0,      604.3d0,      -59.2d0,     5935.3d0, 
     *     1618.3d0,      -94.5d0,     1602.9d0,      328.2d0, 
     *      -40.1d0,     1034.0d0,      278.1d0,      -12.7d0, 
     *     1496.5d0,      372.6d0,       78.3d0,        3.3d0, 
     *     1956.8d0,      577.2d0,      119.2d0,      -16.9d0, 
     *      943.8d0,      332.0d0,       60.6d0,      -12.6d0, 
     *      356.8d0,      100.3d0,        9.6d0,       -0.1d0, 
     *       64.6d0,       -7.0d0,      -10.9d0,       -0.8d0, 
     *      881.3d0,     -535.8d0,       38.3d0,      874.4d0, 
     *     -804.2d0,       65.8d0,      190.8d0,     -278.2d0, 
     *       27.7d0,     1418.4d0,      835.9d0,      660.6d0, 
     *    -1473.6d0,     3950.5d0,    -3648.9d0,      757.4d0, 
     *     1053.0d0,      696.5d0,      204.4d0,      143.8d0, 
     *     -410.1d0,     1816.8d0,      303.2d0,     -209.0d0, 
     *     2265.0d0,      448.0d0,     -314.6d0,      847.8d0, 
     *      187.3d0,     -154.1d0,      171.7d0,       30.8d0, 
     *      -39.2d0,     2213.5d0,      430.9d0,      -71.5d0, 
     *     4457.7d0,     1154.4d0,      -15.5d0,     1173.5d0, 
     *      253.9d0,      -54.2d0,      801.4d0,      184.7d0, 
     *       -3.7d0,     -247.8d0,    -1234.0d0,     -621.2d0, 
     *     -148.2d0,       20.3d0,     -767.2d0,    -2067.6d0, 
     *    -1033.6d0,     -256.2d0,       45.1d0,     -635.7d0, 
     *    -1202.3d0,     -612.5d0,     -150.9d0,       38.7d0, 
     *     -262.0d0,     -471.1d0,     -247.6d0,      -53.9d0, 
     *       22.1d0,      -53.3d0,     -102.6d0,      -55.0d0, 
     *       -9.2d0,        7.2d0,    -3617.0d0,    -7824.1d0, 
     *    -6433.1d0,    -3799.1d0,    -1141.6d0,     4213.8d0, 
     *     8832.9d0,    11023.7d0,     8211.2d0,     2830.5d0, 
     *    -3966.9d0,    -7719.2d0,    -6392.5d0,    -3806.3d0, 
     *    -1134.1d0,     1178.4d0,     2731.0d0,     3395.8d0, 
     *     2551.9d0,      901.9d0,   -27720.8d0,   -49305.0d0, 
     *   -27982.8d0,    -8218.3d0,    37489.9d0,    65058.5d0, 
     *    37703.2d0,    11270.9d0,   -10966.7d0,   -19824.7d0, 
     *   -11131.7d0,    -3256.3d0,      325.1d0,     -986.7d0, 
     *     -741.7d0,     -416.4d0,     -133.5d0,      220.1d0, 
     *    -1491.4d0,    -1118.4d0,     -648.9d0,     -199.0d0, 
     *       45.5d0,     -667.7d0,     -525.6d0,     -318.0d0, 
     *      -94.5d0,       63.3d0,     -179.0d0,     -158.5d0, 
     *      -98.5d0,      -32.0d0,       27.7d0,      -29.7d0, 
     *      -30.3d0,      -18.5d0,       -7.3d0,      931.3d0, 
     *    -1252.0d0,     -164.1d0,     1034.8d0,    -1886.8d0, 
     *     -295.4d0,      257.1d0,     -793.2d0,     -208.7d0, 
     *       20.8d0,     -148.6d0,      -77.5d0,     2312.0d0, 
     *    -1951.4d0,     -451.1d0,     1267.0d0,    -2232.0d0, 
     *     1482.1d0,     1773.7d0,    -1609.5d0,     -173.8d0, 
     *      448.3d0,     -307.1d0,     -101.0d0,      -17.3d0, 
     *      405.8d0,     -524.7d0,     -179.0d0,      -57.8d0, 
     *      139.1d0,     -192.5d0,      -69.9d0,      -38.8d0, 
     *      193.9d0,      143.2d0,       75.4d0,       13.5d0, 
     *      130.6d0,      149.2d0,       72.1d0,       18.5d0, 
     *        4.0d0,       -5.9d0,      -10.4d0,       -3.7d0, 
     *    -1092.0d0,      659.2d0,    -1525.0d0,      630.3d0, 
     *    -2302.9d0,     1343.1d0,    -2677.2d0,     1136.4d0, 
     *    -1705.2d0,     1128.3d0,    -1753.1d0,      784.3d0, 
     *     -799.2d0,      669.9d0,     -816.3d0,      392.0d0, 
     *     -212.7d0,      225.3d0,     -222.2d0,      114.6d0, 
     *     5145.1d0,    -7147.4d0,     3164.7d0,     -144.9d0, 
     *    -6229.4d0,     9549.0d0,    -4581.7d0,      897.3d0, 
     *     2352.1d0,    -2946.0d0,     1198.2d0,      192.0d0, 
     *     1552.9d0,      252.5d0,      -60.7d0,      -68.7d0, 
     *      -26.5d0,     2096.1d0,      382.0d0,      -78.9d0, 
     *     -108.1d0,      -34.9d0,      915.6d0,      181.8d0, 
     *      -36.2d0,      -48.5d0,      -13.6d0,      297.0d0, 
     *       46.3d0,      -14.0d0,      -11.8d0,       -4.9d0, 
     *       58.0d0,        3.1d0,       -3.5d0,       -2.1d0, 
     *       -1.5d0,     2495.8d0,      530.8d0,      -39.0d0, 
     *     3584.0d0,      836.7d0,      -50.3d0,     1716.9d0, 
     *      392.1d0,      -40.2d0,      521.7d0,       91.8d0, 
     *      -18.6d0,       72.1d0,       11.0d0,        0.6d0, 
     *      883.9d0,     2319.7d0,     -538.2d0,      989.4d0, 
     *     3616.8d0,     -790.9d0,      447.4d0,     1590.4d0, 
     *     -267.7d0,      152.6d0,      297.2d0,      -14.8d0, 
     *   -30638.8d0,    43111.4d0,    43828.5d0,   -52525.1d0, 
     *   -24879.6d0,    34686.8d0,     8664.5d0,     1263.4d0, 
     *    -5289.4d0,    -1069.9d0,     5902.9d0,      777.7d0, 
     *      869.2d0,      161.4d0,      -26.6d0,      804.6d0, 
     *      224.6d0,      -23.8d0,      153.1d0,       73.8d0, 
     *       -4.8d0,     4188.7d0,     1085.1d0,      -67.6d0, 
     *     5210.5d0,     1195.5d0,     -112.9d0,     3268.1d0, 
     *      949.0d0,      -43.5d0,      616.9d0,       72.4d0, 
     *      -21.8d0,      277.0d0,      116.9d0,        6.2d0, 
     *     2763.7d0,      475.7d0,      -92.8d0,     4165.0d0, 
     *      879.8d0,     -158.0d0,     1998.9d0,      624.0d0, 
     *     -105.5d0,      678.7d0,      313.1d0,      -53.3d0, 
     *      180.8d0,      100.1d0,      -14.4d0,       39.1d0, 
     *       16.6d0,        2.3d0,       54.4d0,    -3019.6d0, 
     *    -1270.6d0,      -71.6d0,    -4518.7d0,    -1848.7d0, 
     *     -159.0d0,    -1967.7d0,     -751.6d0,      -59.9d0, 
     *     -416.8d0,     -144.4d0,   358367.6d0,   520343.9d0, 
     *   165511.7d0,  -559255.1d0,  -822777.0d0,  -263079.9d0, 
     *   291463.4d0,   424061.4d0,   135192.3d0,   -65192.0d0, 
     *   -96277.0d0,   -31131.7d0,     3659.6d0,      809.4d0, 
     *     -118.7d0,     5515.8d0,     1458.8d0,     -210.0d0, 
     *     2638.5d0,     1003.0d0,     -140.6d0,      891.8d0, 
     *      489.0d0,      -68.2d0,      241.5d0,      148.3d0, 
     *      -13.4d0,       55.1d0,       21.0d0,        8.1d0, 
     *      -55.5d0,    -4178.2d0,    -1704.7d0,     -312.6d0, 
     *    -6309.3d0,    -2497.8d0,     -351.8d0,    -2809.3d0, 
     *    -1034.0d0,     -131.2d0,     -620.8d0,     -206.6d0, 
     *   505974.8d0,   734336.1d0,   232815.5d0,  -792454.4d0, 
     * -1163833.9d0,  -370734.3d0,   413597.8d0,   601382.9d0, 
     *   191085.0d0,   -94345.2d0,  -138879.9d0,   -44740.8d0, 
     *      195.8d0,      -56.9d0,      -34.1d0,       -6.7d0, 
     *      249.7d0,     -154.1d0,     -105.2d0,      -33.7d0, 
     *      144.2d0,       -2.3d0,        0.3d0,        2.5d0, 
     *       22.0d0,      -45.5d0,      -32.6d0,      -12.0d0, 
     *       16.8d0,       12.1d0,        9.4d0,        4.2d0, 
     *       -0.1d0,       -5.3d0,       -3.9d0,       -1.1d0, 
     *     4604.8d0,     1135.1d0,      -84.1d0,     6750.2d0, 
     *     1763.8d0,     -118.9d0,     3250.3d0,      840.2d0, 
     *      -60.1d0,      984.3d0,      241.6d0,      -15.9d0, 
     *      196.7d0,       64.9d0,       -0.2d0,       57.1d0, 
     *       23.5d0,       -1.5d0 /

      data a /
     *         1.60d0,         2.30d0,         0.75d0,         1.60d0, 
     *         0.25d0,         0.90d0,         1.60d0,         1.50d0, 
     *         1.70d0,        -0.50d0,         0.55d0,         3.70d0, 
     *         2.79d0,         1.35d0,         2.15d0,        -1.30d0, 
     *         2.00d0,         2.79d0,         0.23d0,         3.99d0, 
     *         1.00d0,         1.50d0,         2.20d0,        -0.40d0, 
     *         0.70d0,         1.55d0,         0.80d0,         1.20d0, 
     *         1.80d0,        -2.00d0,         0.90d0,         1.60d0 /

      data b /
     *    -0.000710d0,    -0.000999d0,     0.000500d0,     0.000000d0, 
     *    -0.000249d0,    -0.000550d0,    -0.000749d0,    -0.000670d0, 
     *    -0.000530d0,     0.002400d0,    -0.000500d0,    -0.002330d0, 
     *     0.000710d0,     0.001750d0,    -0.002250d0,     0.003500d0, 
     *     0.001750d0,    -0.002200d0,     0.003500d0,    -0.002290d0, 
     *    -0.000670d0,    -0.000670d0,    -0.000870d0,     0.001200d0, 
     *     0.000400d0,     0.000000d0,    -0.000550d0,    -0.000450d0, 
     *    -0.000550d0,     0.000000d0,    -0.000600d0,    -0.000650d0 /

      ierr = 0

      if(kf.gt.16) then
         ierr=8
         return
      endif

      yldcu = yld**third
      shob  = hob1 / yldcu

      wr   = zero
      dsig = 0.30d0

      xl   = log10(yld)

      x    = (xl + one) / 2.65052d0 - one
      y    = shob / 500.0d0 - one

      if(kf.eq.15)y = shob / 200.0d0 - one

      if(abs(x).le.one.and.abs(y).le.one)goto 46
      ierr=12

      return

 46   s(2) = x
      t(2) = y

      do l=3,6
         s(l) = 2.0d0 * x * s(l-1) - s(l-2)
         t(l) = 2.0d0 * y * t(l-1) - t(l-2)
      enddo

      n=nm(kf)

      goto (101,102,103,104,105,106,107,108,
     *      109,110,111,112,113,113,115,116),kf

 101  ks=2

      if(shob.gt.700.0d0)ks = 4
      if(yld.lt.10.0d0)goto 142

      n = n + 1
      if(shob.ge.800.0d0)n = n + 1
      goto 142

 102  ks = 6

      if(yld.gt.10.0d0)n = n + 1
      goto 141

 103  if(yld.le.10.0d0)goto 200
      n = n + 1
      if(shob.gt.700.0)n = n + 1
      goto 200

 104  ks = 8

      if(yld.gt.10.0d0)n = n + 1
      goto 143

 105  ks=9

      if(shob.gt.750.0d0)ks = 10
      if(shob.le.700.0d0)goto 144

      n = n + 1
      if(yld.gt.40.0d0)n = n + 1
      goto 144

 106  ks = 11

      if(yld.gt.10.0d0)n = n + 1
      goto 144

 107  ks = 12

      if(shob.gt.300.0d0)ks = 13
      if(yld.gt.100.0d0)n = n + 1
      if(yld.ge.2000.0d0)n = n + 1
      goto 144

 108  ks = 14

      if(shob.gt.200.0d0)ks = 15
      if(shob.gt.600.0d0)ks = 16
      if(shob.lt.700.0d0)goto 144
      n = n + 1
      if(yld.gt.200.0)n = n + 1
      goto 144

 109  ks = 17

      if(shob.gt.200.0d0)ks = 18
      if(shob.gt.450.0d0)ks = 19
      if(shob.gt.650.0d0)ks = 20
      if(shob.lt.500.0d0)goto 144
      n = n + 1

      chk = 0.53d0 - 0.50d0 * y

      if(yld.le.700.0d0.and.x.lt.chk)goto 144
      if(shob.gt.800.0d0)return
      n = n + 1
      goto 144

 110  dsig = 0.40d0
      goto 200

 111  ks = 22

      if(shob.gt.750.0d0)ks = 25
      if(yld.gt.200.0d0)goto 121
      if(shob.ge.800.0d0)n = n + 1
      goto 141

 121  if(shob.lt.900.0d0)goto 141
      n = n + 2
      if(yld.ge.1000.0d0)n = n + 1
      goto 141

 112  ks = 28

      if(yld.gt.4.0d0)n = n + 1
      goto 141

 113  if(yld.ge.400.0)goto 123
      if(shob.lt.300.0)n = n + 1
      goto 200

 123  if(shob.le.200.0)n = n + 2
      goto 200

 115  if(shob.gt.400.0)return
      chk = 0.75*y-one
      if(x.lt.chk)return
      goto 200

 116  ks = 31

c  find ksig partitions

 141  x45 = a(ks+1) + b(ks+1) * shob

      if(xl.le.x45)goto 142
      dsig = 0.50d0
      goto 200

 142  x25 = a(ks-1) + b(ks-1) * shob

      if(xl.le.x25)dsig = 0.20d0

 143  x35 = a(ks) + b(ks) * shob

      if(xl.gt.x35)dsig = 0.40d0
      goto 200

 144  dsig = 0.40d0

      x45 = a(ks) + b(ks) * shob
      if(xl.lt.x45)dsig = 0.50d0

 200  k  = lk(n)
      il = li(n)
      jl = (lk(n+1) - k) / il

      do i = 1,il
         c = zero
         do j = 1,jl
            k = k + 1
            c = c + ch(k) * t(j)
         enddo
         wr = wr + c * s(i)
      enddo

      if(wr.lt.zero)wr = zero
      wr = wr * 10.0d0

      return
      end
